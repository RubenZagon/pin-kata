{"version":3,"sources":["components/display/display.tsx","utils/handlePinCode/handlePinCode.ts","components/keyNumber/keyNumber.tsx","components/pinPad/styles.ts","components/pinPad/pinPad.tsx","components/pinPad/controllerPinPad.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","text","Container","color","selectorColor","styled","div","props","checkedPin","pin","correctPin","KeyNumber","number","onClick","Button","role","button","NumbersContainer","Pinpad","MESSAGE","initialStatePinPad","textOnDisplay","password","attemptsCounter","useState","pinPad","setPinPad","user","setUser","printTextOnDisplay","textOnDisplayIs","length","useEffect","console","warn","axios","get","then","res","data","name","setTimeout","seconds","alert","showWelcomeMessageIn","Keyboard","keyNumbers","pressKey","i","push","map","numb","key","keyboardCreator","value","newNumber","toString","split","el","index","join","reverse","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65df79f7.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport styled from '@emotion/styled';\n\ninterface DisplayProps {\n  className?: string;\n  text: string\n}\n\nexport const Display: FC<DisplayProps> = ({ text }) => {\n  return (\n    <Container color={selectorColor(text)}>\n      <h1>{text}</h1>\n    </Container>\n  );\n};\n\n\nconst Container = styled.div`\n@import url('https://fonts.googleapis.com/css?family=ZCOOL+QingKe+HuangYou&display=swap');\nfont-family: 'ZCOOL QingKe HuangYou', cursive;\n\n@media (min-width: 1024px){\n  border-radius:5px;\n}\n\nmin-width: 100%;\nbackground: ${props => props.color};\nbox-shadow: 0px 0px 30px 0px rgba(255,226,179,0.5);\ncolor: #1a1b1f;\nfont-size: 4vh;\nmargin-bottom: 20px;\ndisplay:flex;\njustify-content:center;\nalign-items:center;\n\nh1{\n  opacity:0.8;\n}\n`\n\nfunction selectorColor(text: string) {\n  switch (text) {\n    case 'OK':\n      return `linear-gradient(90deg, \n        rgba(183,255,179,1) 0%, \n        rgba(126,255,121,1) 5%, \n        rgba(48,255,15,1) 36%, \n        rgba(48,255,15,1) 66%, \n        rgba(151,255,121,1) 95%, \n        rgba(188,255,179,1) 100%);`\n\n    case 'ERROR':\n      return `linear-gradient(90deg, \n        rgba(255,179,179,1) 0%, \n        rgba(255,148,121,1) 5%, \n        rgba(255,95,15,1) 36%, \n        rgba(255,95,15,1) 66%, \n        rgba(255,148,121,1) 95%, \n        rgba(255,179,179,1) 100%);`\n\n    case 'ðŸ”’ LOCKED':\n      return `linear-gradient(90deg, rgba(222,222,222,1) 0%, rgba(199,199,199,1) 5%, rgba(177,177,177,1) 36%, rgba(177,177,177,1) 66%, rgba(199,199,199,1) 95%, rgba(222,222,222,1) 100%);`\n    default:\n      return `linear-gradient(90deg,\n        rgba(255,226,179,1) 0%,\n        rgba(255,204,121,1) 5%,\n        rgba(255,160,112,1) 36%,\n        rgba(255,160,112,1) 66%,\n        rgba(255,204,122,1) 95%,\n        rgba(255,226,179,1) 100%);\n      ` }\n}","import { correctPin } from \"../../App\";\n\n\nexport function checkedPin(pin: string) {\n  return correctPin === pin ? 'OK' : 'ERROR'\n}\n\n\nexport function hiddenNumbers(pin: string): string {\n  return pin.split('').map((el, index) => {\n    if (pin.length === index + 1) {\n      return el\n    } else {\n      return '*'\n    }\n  }).join('');\n}\n","import React, { FC } from \"react\";\nimport styled from '@emotion/styled';\n\ninterface KeynumberProps {\n  number: number\n  className?: string;\n  onClick?: any;\n\n}\n\nexport const KeyNumber: FC<KeynumberProps> = ({ number, onClick }) => {\n  return (\n    <Button onClick={onClick} role='key'>{number}</Button>\n  );\n};\n\n/**\n * primary: #1a1b1f\n * highlight: #FFFFF\n * lightShadows: #242529 / #292a2f\n * darkShadows: #151518\n */\n\nconst Button = styled.button`\n@import url('https://fonts.googleapis.com/css?family=ZCOOL+QingKe+HuangYou&display=swap');\nfont-family: 'ZCOOL QingKe HuangYou', cursive;\nfont-size:5vh;\ncolor: lightgray;\ncursor:pointer;\n\ndisplay:flex;\njustify-content:center;\nalign-items:center;\n\nmin-width:100px;\nbackground: #1a1b1f;\n\nborder: 1px solid #1a1b1f; \nborder-radius: 5%;\n\nbox-shadow: \n5px 5px 20px 0px rgba(21,21,24,1),\n1px 1px 0px 0px rgba(255,255,255,0.05),\n-5px -5px 20px 0px rgba(36,37,41,1);\n\n&:hover{\n  color: orange;\n}\n\n&:active{\n  box-shadow: \n    inset 5px 5px 20px 0px rgba(21,21,24,1),\n    1px 1px 0px 0px rgba(255,255,255,0.05),\n    inset -5px -5px 20px 0px rgba(36,37,41,1);\n}\n\n`","import styled from \"@emotion/styled\";\n\n/**\n * primary: #1a1b1f\n * highlight: #FFFFF\n * lightShadows: #242529\n * darkShadows: #151518\n */\n\n\nexport const Container = styled.div`\n\nwidth: 400px;\nheight: 600px;\n\n@media(max-width:1024px){\n  width:100vw;\n  height:100vh;\n}\n\n&:last-child(1) {\n  background: orange;\n  opacity:0.3;\n}\n\ndisplay:grid;\ngrid-template-rows: 1fr 3fr;\n`;\n\nexport const NumbersContainer = styled.div`\ndisplay:grid;\ngrid-template-columns:1fr 1fr 1fr;\ngrid-template-rows: 1fr 1fr 1fr 1fr;\ngrid-column-gap: 20px;\ngrid-row-gap: 20px;\n\nbutton:nth-of-type(10){\n  grid-column: 2/3;\n}\n\n`;","import React, {FC, useEffect, useState} from \"react\";\nimport axios from 'axios'\nimport {Display} from \"../display/display\";\nimport {checkedPin, hiddenNumbers} from \"../../utils/handlePinCode/handlePinCode\";\nimport {keyboardCreator} from \"./controllerPinPad\";\nimport {correctPin} from \"../../App\";\nimport {Container, NumbersContainer} from \"./styles\";\nimport {messageDisplay, PinPadObject} from \"./types\";\n\nexport const Pinpad: FC<{}> = () => {\n  let keyNumbers: number[] = [];\n  const MESSAGE: { OK: messageDisplay, ERROR: messageDisplay , LOCKED: string} = {\n    OK: 'OK',\n    ERROR: 'ERROR',\n    LOCKED: 'ðŸ”’ LOCKED'\n  };\n  const initialStatePinPad: PinPadObject = {\n    textOnDisplay: '',\n    password: '',\n    attemptsCounter: 0\n  };\n  const [pinPad, setPinPad] = useState<PinPadObject>(initialStatePinPad);\n\n  const [user, setUser] = useState<string>('');\n  useEffect(() => {\n    // Remember\n    console.warn('\\nRemember son, the code is :', correctPin);\n\n    axios.get('https://jsonplaceholder.typicode.com/users')\n      .then(res => {\n        const user = res.data;\n        setUser(user[3].name)\n      })\n  }, []);\n\n\n  function printTextOnDisplay(text: string) {\n    setPinPad({...pinPad, textOnDisplay: text});\n  }\n\n  function resetPin(): void {\n    setPinPad({\n      ...pinPad,\n      textOnDisplay: '',\n      password: ''\n    });\n  }\n\n  function pressKey(value: number): void {\n    let newNumber = value.toString();\n    if (pinPad.textOnDisplay.length < 4) {\n      setPinPad({\n        ...pinPad,\n        password: pinPad.password + newNumber,\n        textOnDisplay: hiddenNumbers(pinPad.textOnDisplay + newNumber)\n      });\n    }\n  }\n\n  function textOnDisplayIs(textOnDisplay: messageDisplay): boolean {\n    return pinPad.textOnDisplay.length === 4 && checkedPin(pinPad.password) === textOnDisplay;\n  }\n\n  if (textOnDisplayIs(MESSAGE.OK)) {\n    printTextOnDisplay(MESSAGE.OK);\n    resetAllIn(1);\n    showWelcomeMessageIn(1);\n  }\n\n  function resetAllIn(seconds: number) {\n    const time = seconds * 1000;\n    setTimeout(() => {\n      setPinPad(initialStatePinPad)\n    }, time);\n  }\n\n  function showWelcomeMessageIn(seconds: number) {\n    const time = seconds * 1000;\n    setTimeout(() => {\n      alert(`Bienvenido/a ${user}`)\n    }, time)\n  }\n\n  if (textOnDisplayIs(\"ERROR\")) {\n    if (pinPad.attemptsCounter === 2) {\n      printTextOnDisplay(MESSAGE.LOCKED);\n      setTimeout(() => {\n        setPinPad(initialStatePinPad);\n      }, 30000);\n    } else {\n      printTextOnDisplay(MESSAGE.ERROR);\n      setPinPad({...pinPad, attemptsCounter: pinPad.attemptsCounter + 1});\n      setTimeout(() => resetPin(), 1000);\n    }\n  }\n\n  const Keyboard = keyboardCreator(keyNumbers, pressKey).reverse();\n\n\n  return (\n    <Container>\n      <Display text={pinPad.textOnDisplay}/>\n      <NumbersContainer>\n        {Keyboard}\n      </NumbersContainer>\n    </Container>\n  );\n};\n\n\n\n\n","import React from \"react\";\nimport {KeyNumber} from \"../keyNumber/keyNumber\";\nimport {checkedPin} from \"../../utils/handlePinCode/handlePinCode\";\n\n\nexport function keyboardCreator(keyNumbers: number[], pressKey: (value: number) => void) {\n  for (let i = 0; i < 10; i++) {\n    keyNumbers.push(i);\n  }\n  return keyNumbers.map(numb => {\n    return <KeyNumber key={numb} onClick={() => pressKey(numb)} number={numb}/>;\n  });\n}\n\n\nexport function handlePinErrors(intent: number, setPinDisplay: React.Dispatch<React.SetStateAction<string>>, resetPin: () => void, setIntent: React.Dispatch<React.SetStateAction<number>>) {\n  if (intent === 2) {\n    setPinDisplay('ðŸ”’ LOCKED');\n    setTimeout(() => {\n      resetPin();\n      setIntent(0);\n    }, 30000);\n  }\n  else {\n    setPinDisplay('ERROR');\n    setIntent(intent + 1);\n    setTimeout(() => resetPin(), 1000);\n  }\n}\n\n\nexport function pinIsOK(setPinDisplay: React.Dispatch<React.SetStateAction<string>>, resetPin: () => void, setIntent: React.Dispatch<React.SetStateAction<number>>) {\n  setPinDisplay('OK');\n  setTimeout(() => {\n    resetPin();\n    setIntent(0);\n  }, 1000);\n}\n\n\nexport function handleDisplayPinWhenTheTextIs(text: string, pinDisplay: string, password: string) {\n  return pinDisplay.length === 4 && checkedPin(password) === text;\n}\n","import React from 'react';\nimport './App.css';\nimport { Pinpad } from './components/pinPad/pinPad';\n\n\nexport const correctPin = '4455'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Pinpad />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}